// Generated by CoffeeScript 1.12.4
(function() {
  var ActivateFunc, Net, Variable, VariableOf, Variable_map_binary, W, b, deepcopy, input, jam, numeric, result;

  numeric = require('numeric');

  deepcopy = require('deepcopy');

  jam = require('./jam');

  Function.prototype.property = function(prop, desc) {
    return Object.defineProperty(this.prototype, prop, desc);
  };

  Variable = (function() {
    "Basic brick in neuron network.";
    function Variable(num_row, num_col, option) {
      var _, data, initializer;
      if (option == null) {
        option = {};
      }
      this._c_param = {
        num_row: 0,
        num_col: 0
      };
      this._m_state = {
        data: 0
      };
      if (num_row instanceof Array) {
        data = deepcopy(num_row);
        this._c_param.num_col = typeof data[0] === 'number' ? data.length : data[0].length;
        this._c_param.num_row = typeof data[0] === 'number' ? 1 : data.length;
        this._m_state.data = data;
      } else {
        this._c_param.num_col = num_col;
        this._c_param.num_row = num_row;
        initializer = deepcopy(option).initializer;
        if ((initializer != null) && isNaN(initializer())) {
          throw TypeError("Error: initializer :: Void -> Double");
        }
        this._m_state.data = (function() {
          var i, ref, results;
          results = [];
          for (_ = i = 0, ref = num_row; 0 <= ref ? i < ref : i > ref; _ = 0 <= ref ? ++i : --i) {
            results.push((function() {
              var j, ref1, results1;
              results1 = [];
              for (_ = j = 0, ref1 = num_col; 0 <= ref1 ? j < ref1 : j > ref1; _ = 0 <= ref1 ? ++j : --j) {
                results1.push((typeof initializer === "function" ? initializer() : void 0) || 0);
              }
              return results1;
            })());
          }
          return results;
        })();
      }
      this;
    }

    Variable.property('num_col', {
      get: function() {
        return this._c_param.num_col;
      }
    });

    Variable.property('num_row', {
      get: function() {
        return this._c_param.num_row;
      }
    });

    Variable.property('is_vector', {
      get: function() {
        return this._c_param.num_row === 1;
      }
    });

    Variable.property('data', {
      get: function() {
        return this._m_state.data;
      }
    });

    Variable.prototype.toString = function() {
      return "[Variable Object] Size: " + this._c_param.num_row + "x" + this._c_param.num_col;
    };

    Variable.prototype.map = function(f) {
      var data;
      data = f(this._m_state.data);
      return VariableOf(data);
    };

    return Variable;

  })();

  VariableOf = function(num_row, num_col, option) {
    return new Variable(num_row, num_col, option);
  };

  ActivateFunc = (function() {
    "Activate functions.";
    function ActivateFunc() {}

    ActivateFunc.prototype.tanh = function(x) {
      return Math.tanh(x);
    };

    return ActivateFunc;

  })();

  Net = (function() {
    "Neuron network.";
    function Net() {}

    return Net;

  })();

  W = VariableOf(2, 3, {
    'initializer': function() {
      return -0.1;
    }
  });

  b = VariableOf(1, 3);

  input = VariableOf([1, 2]);

  Variable_map_binary = function(f) {
    return function(a, b) {
      return VariableOf(f(a.data, b.data));
    };
  };

  result = Variable_map_binary(numeric.dot)(input, W);

  console.log(result.data, result.toString());

}).call(this);

//# sourceMappingURL=app.js.map
